% 2D Poisson Solver (x"+y"=f)
% Using Gauss-Seidel - Second centered difference approximation 
% Equal spaced nodes in x and y
clc
clear;

N = 10;         % N+1 node is at L, boundary
                % 1st node is on boundary at 0
                % This code assumes that the same number of nodes are used
                % in both x and y, but it can easily be changed
L = pi;         % Domain for testing
M = 1;			% M is given to be an integer, so choose 1
Uxnot = 0;      % Dirichlet BC (u=0) at x=0
Uynot = 0;      % Dirichlet BC (v=0) at y=0
UxL = 0;        % Dirichlet BC (u=0) at x=Lx
UyL = 0;        % Dirichlet BC (v=0) at y=Ly 

era = 0.00001;% Used to compare itteration results
fprintf('Solution to 2D Poisson using Gauss-Seidel method\n\n');
fprintf('Absolute error between itterations:   %1.1e\n\n', era);
fprintf('Number of equally spaced intervals:   %d\n', N); 

% Define some constants and RHS vector and apply BC to system
for k = 1:2
	N = k*N;
    max_er = 2*era;	% Initial error for while loop itteration stop condition
    it = 0;         % iterations
    h = L/N;            % Step size 
   C1 = -2*M;           % Create constants for equations to reduce the number 
   C2 = h*M;            % of operations within the loop
   C3 = h*h*0.25;       % multiply by .25 instead of divide (expensive) by 4 
    U = zeros(N+1,N+1);	% Create solution matix with initial guess of ZERO
    F = zeros(N+1,N+1);	% Create non homogeneous RHS vector
                    	% Apply Dirichlet boundary conditions to solution matrix
    U(:,1) = Uxnot;      % LHS Boundary at x = 0
  U(:,N+1) = UxL;      % RHS Boundary at x = L
  U(1,2:N) = Uynot;     	% BHS Boundary at y = 0 opposite of thought
U(N+1,2:N) = UyL;     	% THS Boundary at y = L

for i = 2:N             % Create RHS vector for all interior U, i,j = 1,N+1 on boundary		
        for j = 2:N 
       	F(i,j) = C1*sin(C2*(j-1))*cosh(C2*(i-1));
    	end
end

F = C3.*F;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Going to do this twice and compare results
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
while max_er > era   % RHS of Condition is percent error, no error in matrix can be larger than RHS

it = it + 1;            % Track the number of itterations with count
Uold = U;                   % Must rewrite previous matrix so that can compare to new and determine error

for i = 2:N                 % Gauss - Seidel itteration 
	for j = 2:N
		U(i,j) = (0.25)*( U(i+1,j) + U(i-1,j) + U(i,j+1) + U(i,j-1) ) - F(i,j);
		iter_err(i,j) = abs( (U(i,j) - Uold(i,j)));
    end
end
max_er = max(iter_err(:));
end

for i=1:N+1
    for j = 2:N+1
    Uexact(i,j) = (L-(i-1)*h)*sin(C2*(j-1))*sinh(C2*(i-1));
    end
end

for i = 2:N
    for j = 2:N
    L1err(i,j) = abs( Uexact(i,j) - U(i,j));    
    end
end
if k == 2
	U2N = U;
    U2Ne= Uexact;
    L1err2N = (1/(N-1)^2) * sum(L1err(:));
    fprintf('Number of equally spaced intervals:   %d\n', N)
    fprintf('Mean L1 error of all internal points: %1.5f\n\n', L1err2N);
else
    UN = U;
    UNe = Uexact;
    L1errN = (1/(N-1)^2) * sum(L1err(:));
    fprintf('Mean L1 error of all internal points: %1.5f\n\n', L1errN);
end
end
% Plot and table data
x = linspace(0,pi,N+1);
figure;
plot(x,U2N(N/4+1,:),'o',x,U2Ne(N/4+1,:),'b',x,U2N(N/2+1,:),'+',x,U2Ne(N/2+1,:),'r',x,U2N(3*N/4+1,:),'*',x,U2Ne(3*N/4+1,:),'y');
legend('U(x,\pi/4) approximate','U(x,\pi/4) exact','U(x,\pi/2) approximate','U(x,\pi/2) exact','U(x,3\pi/4) approximate','U(x,3\pi/4) exact');
figure(2);
y = linspace(0,pi,N+1);
plot(U2N(N/4+1,:),y,'o',U2Ne(N/4+1,:),y,'b',U2N(N/2+1,:),y,'+',U2Ne(N/2+1,:),y,'r',U2N(3*N/4+1,:),y,'*',U2Ne(3*N/4+1,:),y,'y');
legend('U(\pi/4,y) approximate','U(\pi/4,y) exact','U(\pi/2,y) approximate','U(\pi/2,y) exact','U(3\pi/4,y) approximate','U(3\pi/4,y) exact');
